using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using System.Collections.Immutable;
using System.Text;
using System.Linq;

namespace SourceGenDemo.Generators;

[Generator]
public class CqrsDependencyInjectionGenerator : IIncrementalGenerator
{
    private const string BaseInterfaceName = "IRequestHandler";

    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        var providers = context.SyntaxProvider.CreateSyntaxProvider(
            predicate: static (node, _) => node is ClassDeclarationSyntax { BaseList: not null } source &&
                                           source.BaseList.Types.Any(x => x.ToString().Contains(BaseInterfaceName)),
            transform: static (ctx, _) =>
            {
                var symbol = ctx.SemanticModel.GetDeclaredSymbol(ctx.Node) as INamedTypeSymbol;

                var implementedInterfaces = symbol!.AllInterfaces;

                var targetInterface = implementedInterfaces.First(x => x.Name.Contains(BaseInterfaceName));

                return new CqrsInjectionModel { Name = symbol.ToString(), InterfaceName = targetInterface.ToString() };
            });

        var collect = providers.Collect();

        context.RegisterSourceOutput(collect, Emit);
    }

    private void Emit(SourceProductionContext context, ImmutableArray<CqrsInjectionModel> models)
    {
        var sb = new StringBuilder();
        sb.AppendLine("// <auto-generated />");
        sb.AppendLine();

        sb.AppendLine("using Microsoft.Extensions.DependencyInjection;");
        sb.AppendLine();

        sb.AppendLine("public static class CqrsDependencyInjection");
        sb.AppendLine("{");
        sb.AppendLine("    public static void AddCqrs(this IServiceCollection services)");
        sb.AppendLine("    {");

        foreach (var model in models)
        {
            sb.AppendLine($"        services.AddScoped<{model.InterfaceName}, {model.Name}>();");
        }

        sb.AppendLine("    }");
        sb.AppendLine("}");

        context.AddSource("CqrsDependencyInjection.g.cs", sb.ToString());
    }

    private class CqrsInjectionModel
    {
        public string Name { get; set; } = string.Empty;
        public string InterfaceName { get; set; } = string.Empty;
    }
}
